apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: Create a Spring Boot app and publish gitlab
  title: Create a Spring Boot app and publish gitlab
  description: Create a Spring Boot app and publish gitlab
  tags:
    - recommended
    - spring-boot
    - java
    - maven
spec:
  owner: nikhil
  system: janus-idp
  type: service
 # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Provide information about the new component
      required:
        - orgName
        - repoName
        - owner
        - port
        - componentId
      properties:
        orgName:
          title: Organization Name
          type: string
          default: development
        repoName:
          title: Repository Name
          type: string
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        owner:
          title: Owner
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        port:
          title: Port
          type: number
          default: 8080
          description: Override the port exposed for the application
        componentId:
          title: Name
          type: string
          description: Unique name of the component
          default: my-spring-boot-app
          ui:field: EntityNamePicker
          maxLength: 23
    - title: Provide information about the Java metadata
      required:
        - groupId
        - artifactId
        - javaPackage
      properties:
        groupId:
          title: Group ID
          type: string
          default: nikhil.spring
          description: Maven Group ID eg (pl.piomin)
        artifactId:
          title: Artifact ID
          type: string
          default: myspring-boot-on-openshift
          description: Maven Artifact ID
        javaPackage:
          title: Java Package Namespace
          type: string
          default: org/nikhil/spring
          description: Name for the Java Package (ensure to use the / character as this is used for folder structure) should match Group ID and Artifact ID
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
          default: sample srping app
    - title: Provide information about the CI method
      required:
        - ci
      properties:
        ci:
          title: Select a CI method
          type: string
          description: This action will create a CI pipeline for your application based on chosen method
          default: ../../skeletons/ci/tekton/
          enum:
            - ../../skeletons/ci/tekton/
          enumNames:
            - Tekton
      dependencies:
        ci:
          oneOf:
            - required:
                - imageRepository
                - namespace
                - imageUrl
              properties:
                ci:
                  const: ../../skeletons/ci/tekton/
                imageRepository:
                  title: Select a registry
                  type: string
                  default: quay.io
                  enum:
                    - quay.io
                    - image-registry.openshift-image-registry.svc:5000
                  enumNames:
                    - Quay
                    - Internal OpenShift Registry
                imageUrl:
                  title: Image URL
                  type: string
                  description: The Quay.io or OpenShift Image URL <REGISTRY>/<IMAGE_URL>/<REPO_NAME>
                namespace:
                  title: Namespace
                  type: string
                  description: The namespace for deploying resources
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: gitlab.com
              enum:
                - gitlab.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: nikhshar
              enum:
                - nikhshar
 # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ user.entity.metadata.name }}
          applicationType: api
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          imageUrl: ${{ parameters.imageUrl }}
          imageBuilder: s2i-java
          imageRepository: ${{ parameters.imageRepository }}
          port: ${{ parameters.port }}
          ci: ${{ parameters.ci }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          javaPackage: ${{ parameters.javaPackage }}
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.componentId }}
          sourceControl: gitlab.com

    - id: ciTemplate
      name: Generating the CI Component
      action: fetch:template
      input:
        url: ${{ parameters.ci }}
        copyWithoutTemplating: []
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          applicationType: api
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          imageUrl: ${{ parameters.imageUrl }}
          imageBuilder: s2i-java
          imageRepository: ${{ parameters.imageRepository }}
          port: ${{ parameters.port }}
          ci: ${{ parameters.ci }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          javaPackage: ${{ parameters.javaPackage }}
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.componentId }}
          sourceControl: gitlab.com

    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ../../skeletons/catalog-info/
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          cluster: .apps.cluster-lzrsx.sandbox1850.opentlc.com
          applicationType: api
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          imageUrl: ${{ parameters.imageUrl }}
          imageBuilder: s2i-java
          imageRepository: ${{ parameters.imageRepository }}
          port: ${{ parameters.port }}
          ci: ${{ parameters.ci }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          javaPackage: ${{ parameters.javaPackage }}
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.componentId }}
          sourceControl: gitlab.com

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:gitlab
      input:
        allowedHosts: ["${{ parameters.repo.host }}"]
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{ parameters.componentId }}"
        repoVisibility: public
        defaultBranch: main

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ../../skeletons/gitops/
        copyWithoutTemplating: []
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          component_id: ${{ parameters.componentId }}
          description: ${{ parameters.description }}
          destination: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{parameters.componentId}}-gitops.git
          source_repository: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.componentId }}.git
          repository_name: ${{parameters.componentId}}
          git_owner: ${{ parameters.repo.owner }}
          cluster: .apps.cluster-lzrsx.sandbox1850.opentlc.com
          namespace: ${{ parameters.namespace }}
          imageBuilder: s2i-java
          imageUrl: ${{ parameters.imageUrl }}
          imageRepository: ${{ parameters.imageRepository }}
          port: 8080
          repository_host: ${{ parameters.repo.host }}
          deployment_name: spring-boot-template
          user: ${{ user.entity.metadata.name }}
          host: ${{ parameters.repo.host }}
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:gitlab
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{ parameters.componentId }}-gitops"
        title: gitops resources for ${{ parameters.componentId }}
        description: gitops resources for ${{ parameters.componentId }}
        sourcePath: ./tenant-gitops
        repoVisibility: public

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.componentId }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.componentId }}-gitops.git
        path: 'argocd/'

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
